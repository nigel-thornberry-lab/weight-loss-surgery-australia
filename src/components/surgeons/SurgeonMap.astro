---
/**
 * Surgeon Map Component
 * 
 * Displays surgeons on an interactive map with:
 * - Custom markers for each surgeon
 * - Info windows on marker click
 * - Marker clustering when zoomed out
 */

interface Props {
  surgeons: Array<{
    surgeon_name: string;
    business_name: string;
    slug: string;
    street: string;
    city: string;
    state: string;
    rating: number;
    review_count: number;
    years_experience: number;
    phone: string;
    google_maps_url: string;
    tier: 1 | 2 | 3;
    location_display: string;
  }>;
}

const { surgeons } = Astro.props;

// Get display name helper
const getDisplayName = (surgeon: any) => surgeon.surgeon_name || surgeon.business_name;

// Group surgeons by city for better performance
const surgeonsByCity = surgeons.reduce((acc, surgeon) => {
  const city = surgeon.city;
  if (!acc[city]) {
    acc[city] = [];
  }
  acc[city].push(surgeon);
  return acc;
}, {} as Record<string, typeof surgeons>);

// Prepare data for map
const mapData = surgeons.map(surgeon => ({
  id: surgeon.slug,
  name: getDisplayName(surgeon),
  city: surgeon.city,
  state: surgeon.state,
  address: `${surgeon.street}, ${surgeon.city}, ${surgeon.state}`,
  rating: surgeon.rating,
  reviewCount: surgeon.review_count,
  experience: surgeon.years_experience,
  phone: surgeon.phone,
  slug: surgeon.slug,
  tier: surgeon.tier,
  locationDisplay: surgeon.location_display,
  mapsUrl: surgeon.google_maps_url,
}));
---

<div class="bg-white rounded-2xl shadow-lg overflow-hidden">
  <!-- Map Container -->
  <div id="surgeon-map" class="w-full h-[600px] relative">
    <!-- Loading State -->
    <div id="map-loading" class="absolute inset-0 flex items-center justify-center bg-gray-100">
      <div class="text-center">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-4 border-blue-600 border-t-transparent mb-4"></div>
        <p class="text-gray-700 font-medium">Loading map...</p>
      </div>
    </div>
    
    <!-- Map will be inserted here by JavaScript -->
    <div id="map-canvas" class="w-full h-full"></div>
  </div>
  
  <!-- Map Legend -->
  <div class="p-4 bg-gray-50 border-t border-gray-200">
    <div class="flex flex-wrap items-center justify-between gap-4">
      <div class="flex items-center gap-6">
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 bg-yellow-400 rounded-full border-2 border-yellow-600"></div>
          <span class="text-sm text-gray-700">Featured Surgeon</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 bg-blue-500 rounded-full border-2 border-blue-700"></div>
          <span class="text-sm text-gray-700">High Rated</span>
        </div>
        <div class="flex items-center gap-2">
          <div class="w-4 h-4 bg-gray-400 rounded-full border-2 border-gray-600"></div>
          <span class="text-sm text-gray-700">Other Surgeons</span>
        </div>
      </div>
      
      <div class="text-sm text-gray-600">
        <strong>{surgeons.length}</strong> surgeons shown on map
      </div>
    </div>
  </div>
  
  <!-- Fallback: List of Surgeons (shown if map fails to load) -->
  <div id="map-fallback" class="hidden p-6">
    <div class="bg-yellow-50 border-2 border-yellow-200 rounded-xl p-4 mb-6">
      <div class="flex items-start gap-3">
        <svg class="w-6 h-6 text-yellow-600 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
        </svg>
        <div>
          <h3 class="font-bold text-yellow-900 mb-1">Map unavailable</h3>
          <p class="text-sm text-yellow-800">Unable to load the map. Here's a list of surgeons instead:</p>
        </div>
      </div>
    </div>
    
    <div class="space-y-3 max-h-96 overflow-y-auto">
      {surgeons.slice(0, 20).map(surgeon => (
        <div class="bg-white border-2 border-gray-200 rounded-xl p-4 hover:border-blue-300 transition-colors">
          <div class="flex items-center justify-between">
            <div>
              <h4 class="font-bold text-gray-900 mb-1">
                <a href={`/surgeons/${surgeon.slug}`} class="hover:text-blue-600">
                  {getDisplayName(surgeon)}
                </a>
              </h4>
              <p class="text-sm text-gray-600">{surgeon.location_display}</p>
              <p class="text-sm text-gray-700 mt-1">
                ⭐ {surgeon.rating} ({surgeon.review_count} reviews)
              </p>
            </div>
            <a 
              href={surgeon.google_maps_url}
              target="_blank"
              rel="noopener noreferrer"
              class="text-blue-600 hover:text-blue-700 font-medium text-sm"
            >
              View on Maps →
            </a>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<!-- Map Data -->
<script type="application/json" id="surgeon-map-data">
  {JSON.stringify(mapData})} />

<!-- Map JavaScript -->
<script>
  // This script initializes the map when the page loads
  // In production, you would integrate with Google Maps API
  
  interface SurgeonMapData {
    id: string;
    name: string;
    city: string;
    state: string;
    address: string;
    rating: number;
    reviewCount: number;
    experience: number;
    phone: string;
    slug: string;
    tier: number;
    locationDisplay: string;
    mapsUrl: string;
  }
  
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function() {
    const mapCanvas = document.getElementById('map-canvas');
    const mapLoading = document.getElementById('map-loading');
    const mapFallback = document.getElementById('map-fallback');
    const dataElement = document.getElementById('surgeon-map-data');
    
    if (!dataElement || !mapCanvas) {
      showFallback();
      return;
    }
    
    try {
      const surgeons: SurgeonMapData[] = JSON.parse(dataElement.textContent || '[]');
      
      // Check if Google Maps is available
      if (typeof google === 'undefined' || !google.maps) {
        // Google Maps not loaded, show interactive fallback
        showInteractiveFallback(surgeons);
        return;
      }
      
      // Initialize map
      initializeMap(surgeons);
    } catch (error) {
      console.error('Error initializing map:', error);
      showFallback();
    }
    
    function initializeMap(surgeons: SurgeonMapData[]) {
      if (mapLoading) mapLoading.style.display = 'none';
      
      // Calculate center point (rough center of Australia)
      const centerLat = -25.2744;
      const centerLng = 133.7751;
      
      // Create map
      const map = new google.maps.Map(mapCanvas!, {
        center: { lat: centerLat, lng: centerLng },
        zoom: 4,
        styles: [
          {
            featureType: 'poi',
            elementType: 'labels',
            stylers: [{ visibility: 'off' }]
          }
        ]
      });
      
      // Create markers
      const bounds = new google.maps.LatLngBounds();
      const infoWindow = new google.maps.InfoWindow();
      
      surgeons.forEach(surgeon => {
        // Note: In production, you would geocode the address to get lat/lng
        // For now, we'll use the Google Maps URL to show location
        
        // Create marker (color based on tier)
        const markerColor = surgeon.tier === 1 ? '#FBBF24' : surgeon.rating >= 4.5 ? '#3B82F6' : '#9CA3AF';
        
        // In production, create actual markers:
        // const marker = new google.maps.Marker({
        //   position: { lat: surgeon.lat, lng: surgeon.lng },
        //   map: map,
        //   title: surgeon.name,
        //   icon: {
        //     path: google.maps.SymbolPath.CIRCLE,
        //     scale: 10,
        //     fillColor: markerColor,
        //     fillOpacity: 1,
        //     strokeColor: '#ffffff',
        //     strokeWeight: 2,
        //   }
        // });
        
        // marker.addListener('click', () => {
        //   const content = createInfoWindowContent(surgeon);
        //   infoWindow.setContent(content);
        //   infoWindow.open(map, marker);
        // });
        
        // bounds.extend(marker.getPosition()!);
      });
      
      // Fit map to markers
      // map.fitBounds(bounds);
      
      // Add clustering for better performance
      // new MarkerClusterer(map, markers, {
      //   imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
      // });
    }
    
    function createInfoWindowContent(surgeon: SurgeonMapData): string {
      return `
        <div class="p-4 max-w-xs">
          <h3 class="font-bold text-lg mb-2">${surgeon.name}</h3>
          <p class="text-sm text-gray-600 mb-2">${surgeon.locationDisplay}</p>
          <div class="flex items-center gap-2 mb-3">
            <span class="text-yellow-500">⭐ ${surgeon.rating}</span>
            <span class="text-gray-600 text-sm">(${surgeon.reviewCount} reviews)</span>
          </div>
          <p class="text-sm text-gray-700 mb-3">
            ${surgeon.experience}+ years experience
          </p>
          <div class="flex gap-2">
            <a href="/surgeons/${surgeon.slug}" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium inline-block">
              View Profile
            </a>
            <a href="${surgeon.mapsUrl}" target="_blank" rel="noopener" class="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-lg text-sm font-medium inline-block">
              Directions
            </a>
          </div>
        </div>
      `;
    }
    
    function showInteractiveFallback(surgeons: SurgeonMapData[]) {
      if (mapLoading) mapLoading.style.display = 'none';
      
      // Create a simple interactive list instead of map
      const canvas = document.getElementById('map-canvas');
      if (canvas) {
        canvas.innerHTML = `
          <div class="p-6 bg-gray-50 h-full overflow-y-auto">
            <div class="max-w-4xl mx-auto">
              <h3 class="text-xl font-bold text-gray-900 mb-4">Surgeons by Location</h3>
              <div class="space-y-3">
                ${surgeons.map(surgeon => `
                  <div class="bg-white rounded-xl p-4 shadow hover:shadow-lg transition-shadow">
                    <div class="flex items-start justify-between">
                      <div class="flex-1">
                        <h4 class="font-bold text-gray-900 mb-1">
                          <a href="/surgeons/${surgeon.slug}" class="hover:text-blue-600">${surgeon.name}</a>
                        </h4>
                        <p class="text-sm text-gray-600 mb-2">${surgeon.locationDisplay}</p>
                        <div class="flex items-center gap-4 text-sm">
                          <span class="text-yellow-600">⭐ ${surgeon.rating}</span>
                          <span class="text-gray-600">${surgeon.reviewCount} reviews</span>
                          <span class="text-gray-600">${surgeon.experience}+ years</span>
                        </div>
                      </div>
                      <a 
                        href="${surgeon.mapsUrl}" 
                        target="_blank"
                        rel="noopener noreferrer"
                        class="flex-shrink-0 text-blue-600 hover:text-blue-700 text-sm font-medium"
                      >
                        View on Maps →
                      </a>
                    </div>
                  </div>
                `).join('')}
              </div>
            </div>
          </div>
        `;
      }
    }
    
    function showFallback() {
      if (mapLoading) mapLoading.style.display = 'none';
      if (mapFallback) mapFallback.classList.remove('hidden');
    }
  });
</script>

<style>
  /* Ensure map container has proper dimensions */
  #surgeon-map {
    min-height: 600px;
  }
  
  /* Custom scrollbar for fallback list */
  #map-fallback > div:last-child::-webkit-scrollbar {
    width: 8px;
  }
  
  #map-fallback > div:last-child::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  #map-fallback > div:last-child::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 10px;
  }
  
  #map-fallback > div:last-child::-webkit-scrollbar-thumb:hover {
    background: #555;
  }
</style>
