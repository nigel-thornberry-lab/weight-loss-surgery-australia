---
interface Link {
  title: string;
  href: string;
  description?: string;
}

interface Props {
  title?: string;
  links: Link[];
  theme?: 'light' | 'dark';
}

const { 
  title = "Related Resources",
  links,
  theme = 'light'
} = Astro.props;

const bgClass = theme === 'dark' ? 'bg-gray-800' : 'bg-white';
const borderClass = theme === 'dark' ? 'border-gray-700' : 'border-gray-200';
const titleClass = theme === 'dark' ? 'text-white' : 'text-gray-900';
const linkClass = theme === 'dark' ? 'text-blue-400 hover:text-blue-300' : 'text-blue-600 hover:text-blue-700';
const descClass = theme === 'dark' ? 'text-gray-400' : 'text-gray-600';
---

<section class={`${bgClass} rounded-xl border ${borderClass} p-8 my-12 shadow-md`}>
  <h2 class={`text-2xl font-bold ${titleClass} mb-6`}>{title}</h2>
  <div class="grid md:grid-cols-2 gap-6">
    {links.map(link => (
      <a 
        href={link.href}
        class={`block p-4 rounded-lg border ${borderClass} hover:shadow-lg transition-all duration-200 group`}
      >
        <div class="flex items-start">
          <svg class="w-5 h-5 text-blue-500 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"/>
          </svg>
          <div>
            <h3 class={`font-semibold ${linkClass} group-hover:underline mb-1`}>
              {link.title}
            </h3>
            {link.description && (
              <p class={`text-sm ${descClass}`}>{link.description}</p>
            )}
          </div>
        </div>
      </a>
    ))}
  </div>
</section>

